# Main chart kube-prometheus-stack values: https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
fullnameOverride: kube-prometheus-stack

prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/group.name: service-mesh
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:533267158774:certificate/59a502b6-0bd6-4af7-be13-d2d89b19bbea
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
      alb.ingress.kubernetes.io/ssl-redirect: '443'
    pathType: Prefix
    hosts:
      - it-fmsm-con-01-prometheus.it-cna.com
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    additionalScrapeConfigs:
      - job_name: kubernetes-pods
        honor_labels: true
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
            action: drop
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: (.+?)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          # Drop Consul Servers from this job, as the Consul token is required since ACLs are enabled. The 'consul-server' job will scrape the metrics
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            regex: /v1/agent/metrics
            action: drop
      # Commented out as a Prometheus Operator Service Monitor is now used instead. Keeping these scrape configs here as references/examples
      # - job_name: consul-server-pods
      #   honor_labels: true
      #   scheme: https
      #   bearer_token: f5aa851b-f027-d5f1-eb43-0f4b95e5a234
      #   tls_config:
      #     insecure_skip_verify: true
      #   params:
      #     format:
      #       - prometheus
      #   kubernetes_sd_configs:
      #     - role: pod
      #       selectors:
      #       - role: pod
      #         label: component=server
      #       namespaces:
      #         names:
      #           - consul
      #   relabel_configs:
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      #       action: keep
      #       regex: true
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
      #       action: drop
      #       regex: true
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
      #       action: replace
      #       regex: (https?)
      #       target_label: __scheme__
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
      #       action: replace
      #       target_label: __metrics_path__
      #       regex: (.+)
      #     - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
      #       action: replace
      #       regex: (.+?)(?::\d+)?;(\d+)
      #       replacement: $1:8501
      #       # replacement: $1:$2
      #       target_label: __address__
      #     - action: labelmap
      #       regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
      #       replacement: __param_$1
      #     - action: labelmap
      #       regex: __meta_kubernetes_pod_label_(.+)
      #     - source_labels: [__meta_kubernetes_namespace]
      #       action: replace
      #       target_label: namespace
      #     - source_labels: [__meta_kubernetes_pod_name]
      #       action: replace
      #       target_label: pod
      #     - source_labels: [__meta_kubernetes_pod_phase]
      #       regex: Pending|Succeeded|Failed|Completed
      #       action: drop
      # - job_name: consul-server-endpoints
      #   honor_labels: true
      #   scheme: https
      #   bearer_token: f5aa851b-f027-d5f1-eb43-0f4b95e5a234
      #   tls_config:
      #     insecure_skip_verify: true
      #   params:
      #     format:
      #       - prometheus
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #       selectors:
      #       - role: endpoints
      #         label: component=server
      #       namespaces:
      #         names:
      #           - consul
      #   relabel_configs:
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      #       action: keep
      #       regex: true
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
      #       action: drop
      #       regex: true
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
      #       action: replace
      #       regex: (https?)
      #       target_label: __scheme__
      #     - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
      #       action: replace
      #       target_label: __metrics_path__
      #       regex: (.+)
      #     - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
      #       action: replace
      #       regex: (.+?)(?::\d+)?;(\d+)
      #       replacement: $1:8501
      #       # replacement: $1:$2
      #       target_label: __address__
      #     - action: labelmap
      #       regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
      #       replacement: __param_$1
      #     - action: labelmap
      #       regex: __meta_kubernetes_pod_label_(.+)
      #     - source_labels: [__meta_kubernetes_namespace]
      #       action: replace
      #       target_label: namespace
      #     - source_labels: [__meta_kubernetes_pod_name]
      #       action: replace
      #       target_label: pod
      #     - source_labels: [__meta_kubernetes_pod_phase]
      #       regex: Pending|Succeeded|Failed|Completed
      #       action: drop
  additionalServiceMonitors:
    - name: prometheus-operator-istio-control-plane
      jobLabel: istio
      selector:
        matchExpressions:
        - key: istio
          operator: In
          values:
          - mixer
          - pilot
          - galley
          - citadel
          - sidecar-injector
      namespaceSelector:
        any: true
      endpoints:
      - port: http-monitoring
        interval: 15s
      - port: http-policy-monitoring
        interval: 15s
    - name: prometheus-operator-istio-data-plane
      jobLabel: envoy-stats
      selector:
        matchExpressions:
        - key: istio-prometheus-ignore
          operator: DoesNotExist
      namespaceSelector:
        any: true
      endpoints:
      - path: /stats/prometheus
        targetPort: http-envoy-prom
        interval: 15s
        relabelings:
        - action: keep
          regex: .*-envoy-prom
          sourceLabels:
          - __meta_kubernetes_pod_container_port_name
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          sourceLabels:
          - __meta_kubernetes_namespace
          targetLabel: namespace
        - action: replace
          sourceLabels:
          - __meta_kubernetes_pod_name
          targetLabel: pod_name
    - name: prometheus-operator-consul-server
      selector:
        matchLabels:
          component: server
      namespaceSelector:
        matchNames:
          - consul
      endpoints:
      - path: /v1/agent/metrics
        port: https
        scheme: https
        interval: 15s
        tlsConfig:
          insecureSkipVerify: true
        params:
          format:
            - prometheus
        bearerTokenSecret:
          name: consul-token-agent-read
          key: token

# Sub-chart Grafana values: https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
grafana:
  enabled: true
  adminPassword: ServiceMesh1!
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: alb
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      alb.ingress.kubernetes.io/group.name: service-mesh
      alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:533267158774:certificate/59a502b6-0bd6-4af7-be13-d2d89b19bbea
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
      alb.ingress.kubernetes.io/ssl-redirect: '443'
    pathType: Prefix
    hosts:
      - it-fmsm-con-01-grafana.it-cna.com
  sidecar:
    dashboards:
      enabled: true
      SCProvider: false
      folder: /var/lib/grafana/dashboards
      folderAnnotation: grafana_folder
      annotations:
        grafana_folder: default
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: default
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default
      - name: service-mesh
        orgId: 1
        folder: Service Mesh
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/service-mesh

prometheusOperator:
  enabled: true
  tls:
    enabled: true
